// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  role         UserRole      @default(REGULAR)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userDetails  UserDetails?
  userConfig   UserConfig?
  events       Event[]
  achievements Achievement[]
  Team         Team?         @relation(fields: [teamId], references: [id])
  teamId       Int?

  @@map("users")
}

model UserDetails {
  id           Int       @id @default(autoincrement())
  location     String?
  age          Int?
  gender       Gender?
  smokerTime   Int?
  smokesPerDay Int?
  quitAt       DateTime?
  sports       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int       @unique

  @@map("user_details")
}

model Event {
  id        Int        @id @default(autoincrement())
  type      UserEvents
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("events")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model Achievement {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("achievements")
}

model UserConfig {
  id     Int     @id @default(autoincrement())
  locale String? @default("en")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique

  @@map("users_config")
}

model UserStats {
  id          Int  @id @default(autoincrement())
  moneySaved  Int? @default(0) //in user currency
  lifeGain    Int? @default(0) //in days
  panicEvents Int? @default(0)

  @@map("users_stats")
}

enum Gender {
  MALE
  FEMALE
  TRANSGENDER
  NEUTRAL
  NON_BINARY
  AGENDER
  PANGENDER
}

enum UserEvents {
  QUIT
  RELAPSE
  PANIC_ATTACK
  ANXIETY
}

enum UserRole {
  ADMIN
  REGULAR
}
